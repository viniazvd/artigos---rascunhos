Programação funcional está em alta.
Motivo? Ténicas funcionais que ajudam a:
-Refatorar 
-Testar
-Escrever códigos declarativos, ou seja, mais fácil de entender de relance
-Uso especial de listas e operações de listas

Um passo importante para ser capaz de escrever um código funcional e usar técnicas poderosas de programação funcional e reativa, 
é entender as 3 grandes operações de lista: map, filter e reduce. Ou seja, nunca mais terá que usar um for para fazer um loop.

--------------------------------------------------------------------------------------------------------------------------------------------

Array.prototype.map()
-Chama a função callback recebida por parâmetro para cada elemento do Array original, em ordem, e constrói um novo array. 

Sintaxe
-arr.map(callback[, thisArg])

callback
-Função cujo retorno produz o elemento do novo Array. Recebe três argumentos:
valorAtual: valor do elemento atual que está sendo processado no array de origem.
indice: índice do elemento atual que está sendo processado no array de origem.
array: array original que está sendo percorrido.
thisArg: parametro opcional a ser utilizado como o this no momento da execução da função callback.

-O método map não modifica o array original. No entanto, a função callback invocada por ele pode fazê-lo.
-A lista de elementos que serão processados pelo map é montada antes da primeira invocação à função callback. 
-Se um elemento for acrescentado ao array original após a chamada ao map, ele não será visível para o callback. 
-Se os elementos existentes forem modificados, os valores que serão repassados serão os do momento em que o método map invocar o callback.
-Elementos removidos não serão visitados.

Exemplos
-O código a seguir mapeia um array de números e cria um novo array contendo o valor da raiz quadrada de cada número do primeiro array.
var numbers = [1, 4, 9];
var roots = numbers.map(Math.sqrt);
// roots é [1, 2, 3], numbers ainda é [1, 4, 9]

-O código a seguir mostrar como o método map funciona quando a função callback possui apenas um argumento. 
-Esse argumento será automaticamente atribuído para cada elemento do array conforme o map itera sobre o array original.
var numbers = [1, 4, 9];
var doubles = numbers.map(function(num) {
  return num * 2;
});
// doubles é agora [2, 8, 18]. numbers ainda é [1, 4, 9]

-Esse exemplo demonstra como iterar sobre uma coleção de objetos recuperada através de querySelectorAll. 
-Nesse caso, vamos pegar todos os options selecionados na tela e imprimir no console.
var elems = document.querySelectorAll('select option:checked');
var values = [].map.call(elems, function(obj) {
  return obj.value;
});

-Usando map para inverter uma string.
var str = '12345';
[].map.call(str, function(x) {
  return x;
}).reverse().join(''); 

--------------------------------------------------------------------------------------------------------------------------------------------

Array.prototype.filter()
-Cria um novo array com todos os elementos que passaram no teste implementado pela função fornecida.

Sintaxe
-var newArray = arr.filter(callback[, thisArg])

callback
-Função para testar cada elemento do array. Returna true para manter o elemento, false caso contrário, recebendo três argumentos:
valorAtual: valor do elemento atual que está sendo processado no array de origem.
indice: índice do elemento atual que está sendo processado no array de origem.
array: array original que está sendo percorrido.
thisArg: parametro opcional a ser utilizado como o this no momento da execução da função callback.

-O filter() não altera a array a partir da qual foi invocado.
-O intervalo de elementos processados pela função filter() é definido antes da invocação do primeiro callback. 
-Elementos que forem adicionados ao array depois que a invocação do filter() não serão visitados pelo callback. 
-Se os elementos existentes forem modificados, os valores que serão repassados serão os do momento em que o método filter invocar o callback.
-Elementos que forem deletados não são visitados..

Exemplos
-O exemplo a seguir usa filter() para criar um array filtrado cujo todos os elementos com valores menores que 10 foram removidos.
function isBigEnough(value) {
  return value >= 10;
}
var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// filtered is [12, 130, 44]

-O exemplo a seguir usa filter() para criar um json filtrado com todos seus elementos diferentes de zero, e id numérico.
var arr = [
  { id: 15 },
  { id: -1 },
  { id: 0 },
  { id: 3 },
  { id: 12.2 },
  { },
  { id: null },
  { id: NaN },
  { id: 'undefined' }
];

var invalidEntries = 0;

function filterByID(obj) {
  if ('id' in obj && typeof(obj.id) === 'number' && !isNaN(obj.id)) {
    return true;
  } else {
    invalidEntries++;
    return false;
  }
}

var arrByID = arr.filter(filterByID);

console.log('Filtered Array\n', arrByID); 
// [{ id: 15 }, { id: -1 }, { id: 0 }, { id: 3 }, { id: 12.2 }]

console.log('Number of Invalid Entries = ', invalidEntries); 
// 4

--------------------------------------------------------------------------------------------------------------------------------------------

Array.prototype.reduce()
-Aplica uma função sobre um acumulador e cada valor do array (da esquerda para direita), deve reduzí-lo a um único valor.

Sintaxe
-array.reduce(callback[, initialValue])

callback
-Função que é executada em cada valor no array, recebe quatro argumentos:
previousValue: valor retornado na última invocação do callback, ou o argumento initialValue, se fornecido.
currentValue: elemento atual que está sendo processado no array.
index: índice do elemento atual que está sendo processado no array.
array: array ao qual a função reduce foi executada.
initialValue: (opcional) objeto a ser usado como o primeiro argumento da primeira chamada da função callback.

-A primeira vez que o callback é chamado, o previousValue e o currentValue podem ter um de dois valores possíveis. 
-Se initialValue for fornecido, então o previousValue será igual a initialValue e currentValue será igual ao primeiro valor no array. 
-Se initialValue não for fornecido, então previousValue será igual ao primeiro valor no array e currentValue será igual ao segundo.
-Se o array estiver vazio e initialValue não tiver sido informado, uma exceção do tipo TypeError será lançada. 

Exemplos
-Soma todos os valores de um array
var total = [0, 1, 2, 3].reduce(function(a, b) {
  return a + b;
});
// total == 6

-Redução de um array de arrays
var reduzido = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
  return a.concat(b);
});
// reduzido é [0, 1, 2, 3, 4, 5]





